---
version: '2'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:6.2.4
    hostname: zookeeper
    container_name: kafka-connect-zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-server:6.2.4
    hostname: kafka
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_METRIC_REPORTERS: ' '
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9101
      # CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: kafka:29092
      # CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: 'false'
      CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'

  schema-registry:
    image: confluentinc/cp-schema-registry:6.2.4
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      - zookeeper
      - kafka
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: 'zookeeper:2181'
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'PLAINTEXT://kafka:29092,PLAINTEXT://localhost:9092'

  connect:
    image: cnfldemos/cp-server-connect-datagen:0.5.3-7.1.0
    hostname: connect
    container_name: kafka-connector
    depends_on:
      - kafka
    ports:
      - "8083:8083"
      - 42514:42514/udp
      - 5060:5060 # KAFKA_DEBUG port
      - 9876:9876 # JMX port
      - 8085:8085
    volumes:
      - ./jars:/etc/kafka-connect/jars/ # if you want your custom jar, put custom jar in ./jars directory
      - ./prometheus:/opt/jmx-exporter/
    # volumes:
    #   - ./config/connect-log4j.properties:/etc/kafka/connect-log4j.properties
    environment:
      CONNECT_BOOTSTRAP_SERVERS: 'kafka:29092'
      CONNECT_REST_ADVERTISED_HOST_NAME: connect
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: compose-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_INTERNAL_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_INTERNAL_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      # CLASSPATH required due to CC-2422
      CLASSPATH: /usr/share/java/monitoring-interceptors/monitoring-interceptors-7.1.0.jar
      # CONNECT_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
      # CONNECT_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
      CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components,/etc/kafka-connect/jars"
      # CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"
      JMX_PORT: 9876
      KAFKA_JMX_OPTS: "-javaagent:/opt/jmx-exporter/jmx_prometheus_javaagent-0.16.0.jar=8085:/opt/jmx-exporter/kafka-connect-pattern.yml -Djava.rmi.server.hostname=0.0.0.0 -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=9876 -Dcom.sun.management.jmxremote.rmi.port=9876 -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false"
      CONNECT_LOG4J_LOGGERS: org.apache.zookeeper=ERROR,org.I0Itec.zkclient=ERROR,org.reflections=ERROR,com.snowflake=DEBUG
      KAFKA_DEBUG: true
      JAVA_DEBUG_PORT: 0.0.0.0:5060
    command:
      - bash
      - -c
      - |
        # echo "Installing Snowflake kafka connector"
        # if jar is available on confluent hub, uncomment below line
        # confluent-hub install --no-prompt snowflakeinc/snowflake-kafka-connector:1.8.0 
        # echo "Launching Kafka Connect worker"
        /etc/confluent/docker/run

# needed only if you want two kafka connect processes
  # connect-2:
  #   image: cnfldemos/cp-server-connect-datagen:0.5.3-7.1.0
  #   hostname: connect-2
  #   container_name: kafka-connector-2
  #   depends_on:
  #     - kafka
  #   ports:
  #     - "18083:8083"
  #   volumes:
  #     - ./jars:/etc/kafka-connect/jars/
  #   # volumes:
  #   #   - ./config/connect-log4j.properties:/etc/kafka/connect-log4j.properties
  #   environment:
  #     CONNECT_BOOTSTRAP_SERVERS: 'kafka:29092'
  #     CONNECT_REST_ADVERTISED_HOST_NAME: connect-2
  #     CONNECT_REST_PORT: 8083
  #     CONNECT_GROUP_ID: compose-connect-group
  #     CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
  #     CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
  #     CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
  #     CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
  #     CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
  #     CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
  #     CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
  #     CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
  #     CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
  #     CONNECT_INTERNAL_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
  #     CONNECT_INTERNAL_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
  #     # CLASSPATH required due to CC-2422
  #     CLASSPATH: /usr/share/java/monitoring-interceptors/monitoring-interceptors-7.1.0.jar
  #     # CONNECT_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
  #     # CONNECT_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
  #     CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components,/etc/kafka-connect/jars"
  #     # CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"
  #     CONNECT_LOG4J_LOGGERS: org.apache.zookeeper=ERROR,org.I0Itec.zkclient=ERROR,org.reflections=ERROR,com.snowflake=DEBUG
  #   command:
  #     - bash
  #     - -c
  #     - |
  #       # echo "Installing Snowflake kafka connector"
  #       # confluent-hub install --no-prompt snowflakeinc/snowflake-kafka-connector:1.8.0
  #       echo "Launching Kafka Connect worker"
  #       /etc/confluent/docker/run

  control-center:
    image: confluentinc/cp-enterprise-control-center:5.5.0
    hostname: control-center
    container_name: kafka-connect-control-center
    depends_on:
      - connect
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'kafka:29092'
      CONTROL_CENTER_CONNECT_CLUSTER: 'connect:8083'
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      # CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      # CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      PORT: 9021
  kafka-topics-generator:
    image: confluentinc/cp-kafka:latest
    container_name: kafka-topics-generator
    depends_on:
      - kafka
    command: 
      - bash
      - -c
      - |
        sleep 5s 
        kafka-topics --create --topic=TEST_TOPIC --if-not-exists --bootstrap-server=kafka:29092 --partitions 4

  # not needed
  # prometheus:
  #   image: prom/prometheus:latest
  #   ports:
  #     - "9090:9090"
  #   volumes:
  #     - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
  #   command: "--config.file=/etc/prometheus/prometheus.yml"
  #   container_name: prometheus

  # grafana:
  #   image: grafana/grafana:latest
  #   ports:
  #    - "3000:3000"
  #   volumes:
  #    - ./grafana/provisioning:/etc/grafana/provisioning
  #    - ./grafana/dashboards:/var/lib/grafana/dashboards
  #   container_name: grafana
  #   depends_on:
  #    - prometheus
